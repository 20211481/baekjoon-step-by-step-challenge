#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <tuple>
#include <string>
#include <cmath>
using namespace std;
typedef long long ll;
int init(int*tree, deque<int>&number, int start, int end, int node)
{
	if (start == end)
		return tree[node] = number[start];
	int mid = (start + end) / 2;
	return tree[node] = init(tree, number, start, mid, node * 2) + init(tree, number, mid + 1, end, node * 2 + 1);
}
int sum(int*tree, int node, int start, int end, int left, int right)
{
	if (left > end || start > right)
		return 0;
	if (left <= start && end <= right)// left<=start,end<=right 범위의 값만 구하기
		return tree[node];

	int mid = (start + end) / 2;
	return sum(tree, node * 2, start, mid, left, right) + sum(tree, node * 2 + 1, mid + 1, end, left, right);
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int n,m;
	cin >> n >> m;
	deque<int>list(n);
	for (int i = 0; i < n; i++)
		cin >> list[i];
	int*tree = new int[4 * n]();
	init(tree, list, 0, n - 1, 1);
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		a -= 1, b -= 1;
		cout << sum(tree, 1, 0, n - 1, a, b) << "\n";
	}

}
