#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
using namespace std;
typedef pair<char, pair<int, int>> set;
int find(int*parent, int target)
{
	if (parent[target] == target)
		return target;
	return parent[target] = find(parent, parent[target]);
}

bool Union(int*parent, int x, int y)
{
	x = find(parent, x);
	y = find(parent, y);
	if (x != y)
	{
		parent[x] = y;
		return true;
	}
	return false;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n, m,cnt=0;
	cin >> n >> m;
	int*parent = new int[n]();
	bool det = true;
	deque<int>*list = new deque<int>[n];
	deque<pair<int, int>>tmp;
	int*inDegree = new int[n]();
	for (int i = 0; i < n; i++)
		parent[i] = i;

	for (int i = 0; i < m; i++)
	{
		int player1, player2;
		char op;
		cin >> player1 >>op>> player2;
		if (op == '=')
			Union(parent, player1, player2);
		else
			tmp.push_back({ player1,player2 });
	}
	for (auto& ele : tmp)
	{
		int x = find(parent, ele.first);
		int y = find(parent, ele.second);
		list[x].push_back(y);
		inDegree[y]++;
	}
	
	queue<int>que;
	for (int i = 0; i < n; i++)
		if (!inDegree[i])
			que.push(i);

	while (!que.empty())
	{
		cnt++;
		int cur = que.front();
		que.pop();
		for (auto& edge : list[cur])
			if (--inDegree[edge] == 0)
				que.push(edge);

	}
	if (cnt == n)
		cout << "consistent";
	else
		cout << "inconsistent";
}
