#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <unordered_map>
using namespace std;
typedef pair<char, pair<int, int>> set;

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
	cin >> n;
	deque<int>*list = new deque<int>[n + 1];
	int *time = new int[n + 1]();
	int *ans = new int[n + 1]();
	int*inDegree = new int[n + 1]();
	unordered_map<int, int>m;
	for (int i = 0; i < n; i++)
	{
		int t,prev;
		cin >> t;
		time[i + 1] = t;
		cin >> prev;
		while (prev != -1)
		{
			list[prev].push_back(i+1);
			inDegree[i + 1]++;
			cin >> prev;
		}

	}
	queue<pair<int,int>>que,tmp;
	for (int i = 1; i <= n; i++)
		if (!inDegree[i])
			que.push({ 0,i });
	
	
	while (!que.empty())
	{
		int cur = que.front().second;
		int curTime = que.front().first + time[cur];
		ans[cur] = curTime;
		que.pop();
		for (auto& edge : list[cur])
		{
			m[edge] = std::max(m[edge], curTime);
			if (--inDegree[edge] == 0)
				tmp.push({ m[edge],edge });

		}
		if (que.empty())
		{
			while (!tmp.empty())
			{
				que.push(tmp.front());
				tmp.pop();
			}
		}
	}
	for (int i = 1; i <= n; i++)
		cout << ans[i] << "\n";
}
