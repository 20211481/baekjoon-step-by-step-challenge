#include <iostream>
#include <queue>
#include <stack>
using namespace std;

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int test;
	cin >> test;
	for (int t = 0; t < test; t++)
	{
		int n,m;
		cin >> n;
		int*team = new int[n + 1]();
		int*inDegree = new int[n + 1]();
		bool**list = new bool*[n + 1];

		for (int i = 1; i <= n; i++)
			list[i] = new bool[n + 1]();

		for (int i = 1; i <= n; i++)
			cin >> team[i];

		for (int i = 1; i < n; i++)
			for (int j = i + 1; j <= n; j++)
				list[team[i]][team[j]] = true;
			
		
		cin >> m;
		for (int i = 0; i < m; i++)
		{
			int from, to;
			cin >> from >> to;
			if (list[from][to] == true)
				list[from][to] = false, list[to][from] = true;
			else
				list[from][to] = true, list[to][from] = false;
		}

		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= n; j++)
				if (list[i][j] == true)
					inDegree[j]++;

	/*	for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
				cout << list[i][j] << " ";
			cout << "\n";
		}
*/
		queue<int>que,result;
		for (int i = 1; i <= n; i++)
			if (!inDegree[i])
				que.push(i);

		while (!que.empty())
		{
			int cur = que.front();
			result.push(cur);
			que.pop();
			
			for (int i = 1; i <= n; i++)
				if (list[cur][i] == true)
					if (--inDegree[i] <= 0)
						que.push(i);	
		}
		if (result.size() == n)
			while (!result.empty())
				cout << result.front() << " ", result.pop();
		else
			cout << "IMPOSSIBLE";
		cout << "\n";
	}
	
}
