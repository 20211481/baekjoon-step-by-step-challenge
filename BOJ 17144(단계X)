#include <stdio.h>
#include <algorithm>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <queue>
using namespace std;
using set = pair<int, pair<int, int>>;
#define INF 100000000
void ClockWise(int***map,  int Srow,int Scol, int cRow, int cCol,int t)
{
	int clockWiseRow = cRow, clockWiseCol = cCol;
	int prev1 = 0, prev2 = 0;
	for (int i = 1; i < Scol-1; i++)
	{
		prev2 = map[clockWiseRow][i][t];
		map[clockWiseRow][i][t] = prev1;
		prev1 = prev2;
	}
	for (int i = clockWiseRow; i >= 1; i--)
	{
		prev2 = map[i][Scol - 1][t];
		map[i][Scol - 1][t] = prev1;
		prev1 = prev2;
	}
	for (int i = Scol - 1; i >= 1; i--)
	{
		prev2 = map[0][i][t];
		map[0][i][t] = prev1;
		prev1 = prev2;
	}
	for (int i = 0; i < clockWiseRow; i++)
	{
		prev2 = map[i][0][t];
		map[i][0][t] = prev1;
		prev1 = prev2;
	}
}
void ClockTime(int***map, int Srow, int Scol, int cRow, int cCol, int t)
{
	int clockRow = cRow, clockCol = cCol;
	int prev1 = 0, prev2 = 0;
	for (int i = 1; i < Scol-1; i++)
	{
		prev2 = map[clockRow][i][t];
		map[clockRow][i][t] = prev1;
		prev1 = prev2;
	}
	for (int i = clockRow; i <Srow; i++)
	{
		prev2 = map[i][Scol - 1][t];
		map[i][Scol - 1][t] = prev1;
		prev1 = prev2;
	}
	for (int i = Scol - 2; i >= 1; i--)
	{
		prev2 = map[Srow-1][i][t];
		map[Srow-1][i][t] = prev1;
		prev1 = prev2;
	}
	for (int i =Srow-1; i > clockRow; i--)
	{
		prev2 = map[i][0][t];
		map[i][0][t] = prev1;
		prev1 = prev2;
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int row, col, time,ans=0;
	cin >> row >> col >> time;
	int***map = new int**[row];
	deque<pair<int, int>>cleaner;
	for (int i = 0; i < row; i++)
	{
		map[i] = new int*[col];
		for (int j = 0; j < col; j++)
			map[i][j] = new int[time + 1]();
	}
	for (int i = 0; i < row; i++)
		for (int j = 0; j < col; j++)
		{
			cin >> map[i][j][0];
			if (map[i][j][0] == -1)
				cleaner.push_back({ i,j });
		}
	//spread함수 and 합치는 함수 and 정화기함수\
	
	int dx[4] = { -1,1,0,0 };
	int dy[4] = { 0,0,-1,1 };
	for (int t = 1; t <= time; t++)
	{
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				queue<pair<int, int>>que;
                int cnt=0;
                for (int k = 0; k < 4; k++)
				{
					int nextRow = i + dx[k];
					int nextCol = j + dy[k];
					if (map[i][j][t - 1] > 0 && nextRow >= 0 && nextRow < row&&nextCol >= 0 && nextCol < col&&map[nextRow][nextCol][t-1]!=-1)
						cnt++,map[nextRow][nextCol][t]+=map[i][j][t-1]/5;
				}
				int spread = map[i][j][t-1] / 5;
				map[i][j][t - 1] -= cnt*spread;
				
                map[i][j][t]+=map[i][j][t-1];
			}
		}

		//merge
		
		/*cout << "\n확산 후 병합 상태 : \n";
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
				cout << map[i][j][t] << " ";
			cout << "\n\n";
		}*/
		ClockWise(map, row, col, cleaner[0].first, cleaner[0].second,t);
		ClockTime(map, row, col, cleaner[1].first, cleaner[1].second, t);

		/*cout << "\n공기청정기 돌린 상태 : \n";
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
				cout << map[i][j][t] << " ";
			cout << "\n\n";
		}*/
	}
	for (int i = 0; i < row; i++)
		for (int j = 0; j < col; j++)
			if (map[i][j][time] > 0)
				ans += map[i][j][time];
	cout << ans;
}
