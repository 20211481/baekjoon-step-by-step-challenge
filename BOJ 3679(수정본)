#include<iostream>
#include<queue>
#include <algorithm>
#include <stack>
#include <iomanip>
#include <cmath>
#include <map>
#include <string>
using namespace std;
using ll = long long;
using set = pair<pair<ll,ll>,int>;//pair<ll,ll> 좌표,int ->node number
ll ccw(set&fir, set&sec, set&next)//외적
{
	return ((sec.first.first - fir.first.first)*(next.first.second - fir.first.second) - (next.first.first - fir.first.first)*(sec.first.second - fir.first.second));
}
ll inerProduct(set&a, set&b)//내적
{
	return a.first.first*b.first.first + a.first.second * b.first.second;
}
double Dist(set&a, set&b)//점과 점 사이의 거리
{
	return sqrt(pow(a.first.first - b.first.first, 2) + pow(b.first.second - a.first.second, 2));
}
double FindDist(set&a, set&b, set&Point)//선분 ab와 node간의 거리 구하기
{
	double AtoBdist = Dist(a, b);
	double AtoPoint = Dist(a, Point);
	set ABvector = { {b.first.first- a.first.first,b.first.second - a.first.second},0 }, APvector = { {Point.first.first - a.first.first,Point.first.second - a.first.second},0 };
	double theta = acos(inerProduct(ABvector, APvector)/(AtoBdist*AtoPoint));
	return AtoPoint*abs(sin(theta));
}
deque<set>monotone(deque<set>&list)//ConvexHull
{
	deque<set>up, down;
	for (auto& v : list)//윗껍질,아래껍질을 만들고 아래껍질의 시작점부터 반시계방향으로 윗껍질을 포함시켜 return
	{
		while (up.size() >= 2 && ccw(up[up.size() - 2], up.back(), v) >0)//모든 점을 포함해야 하므로 기존 monotone에서는 >=0이지만 일직선상에 있는경우(=0)도 포함해서 convexHull실행
			up.pop_back();
		up.push_back(v);
		while (down.size() >= 2 && ccw(down[down.size() - 2], down.back(), v) <0)
			down.pop_back();
		down.push_back(v);
	}
	down.insert(down.end(), up.rbegin() + 1, up.rend() - 1);
	return down;
}
bool isConvex(deque<set>&Convex)
{
	if (Convex.size() <= 2)
		return false;
	for (int i = 0; i < Convex.size() - 2; i++)
		if (ccw(Convex[i], Convex[i + 1], Convex[i + 2]) != 0)
			return true;
	return false;

}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int test;
	cin >> test;
	while (test--)
	{
		int node;
		cin >> node;
		deque<set>list,Convex;
		deque<deque<set>>mergeConvex;
		for (int i = 0; i < node; i++)
		{
			int x, y;
			cin >> x >> y;
			list.push_back({ {x,y},i });
		}
		sort(list.begin(), list.end());

		while (list.size() > 2)
		{
			Convex = monotone(list);
			if (!isConvex(Convex))
			{
				mergeConvex.push_back(list);
				break;
			}

			for (auto& C : Convex)//ConvexHull에 선택된 점들은 기존 list에서 제거를 함
			{
				for (auto iter = list.begin(); iter != list.end(); iter++)
				{
					if (C == *iter)
					{
						list.erase(iter);
						break;
					}
				}
			}
			mergeConvex.push_back(Convex);//선택된 점들의 집합을 push
		}
		//mergeConvex.push_back(list);//혹시라도 선택이 안된 점들을 push, (도형이 되기위한 조건을 충족하지 못하는 점들의 집합)
		auto iter = mergeConvex.begin() + 1;
		int cnt = 0;
		while (iter != mergeConvex.end())//convexHull로 선택한 점들의 집합을 첫 번째(가장큰 다각형)를 기준으로 작은ConvexHull점들의 집합과 합쳐감
		{
			for (int j = 0; j < (*iter).size(); j++)//첫 번째 점의 집합들의 변과 iter번째의 집합의 점들 사이의 거리중 가장 가까운 변을 선택함
			{
				double MinDist = -1;
				int first;
				set Value;
				for (int i = 0; i < mergeConvex[0].size(); i++)
				{
					double dist = FindDist(mergeConvex[0][i], mergeConvex[0][(i + 1) % mergeConvex[0].size()], (*iter)[j]);
					if (MinDist == -1)
						first = i, MinDist = dist,Value=(*iter)[j];//first는 변을 벡터로 생각했을 때 시작점 
					else
					{
						if (MinDist > dist)
						{
							MinDist = dist;
							first = i;
						}
					}
				}
				mergeConvex[0].insert(mergeConvex[0].begin() + first+1, Value);//선택된 점과 기존의 변을 이어줌 
			}
			iter=mergeConvex.erase(iter);//첫 번째 집합들과 비교한 점들의 집합을 제거하고 다음 점들의 집합의 iterator를 받음ㅅㄱ
		}
		for (auto& v : mergeConvex[0])
			cout << v.second << " ";
		cout << "\n";
	}
}
