#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <map>
#include <string>
#include <math.h>
#include <bitset>
using namespace std;
using ll = long long;
#define INF  5000000
using set = pair<int, pair<int, int>>;
int find(int*parent, int target)
{
	if (parent[target] == target)
		return target;
	return parent[target] = find(parent, parent[target]);
}
bool Union(int x, int y, int*parent)
{
	x = find(parent, x);
	y = find(parent, y);
	if (x != y)
	{
		parent[x] = y;
		return true;
	}
	return false;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int vertex, edge, k;
	cin >> vertex >> edge >> k;

	int*parent = new int[vertex + 1]();
	for (int i = 0; i <= vertex; i++)
		parent[i] = i;
	for (int i = 0; i < k; i++)
	{
		int p;
		cin >> p;
		parent[p] = 0;//발전소를 한 부모에 묶음
	}
	priority_queue<set, deque<set>, greater<set>>pq;
	while (edge--)
	{
		int from, to, weight;
		cin >> from >> to >> weight;
		pq.push({ weight,{from,to} });
	}
	int cnt = 0;
	int dist = 0;
	while (cnt < vertex - k&&!pq.empty())//vertex-generator-1이지만 generator의 한 묶음이 하나의 정점이기 떄문에 +1 
	{
		set top = pq.top();
		pq.pop();
		if (Union(top.second.first, top.second.second, parent))
			cnt++, dist += top.first;
	}
	cout << dist;
}
