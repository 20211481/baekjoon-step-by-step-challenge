#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <map>
#include <string>
#include <math.h>
#include <unordered_map>
using namespace std;
typedef pair<int, pair<int, int>>set;
int find(int*parent, int target)
{
	if (parent[target] == target)
		return target;
	return parent[target] = find(parent, parent[target]);
}
void Union(int*parent, int x, int y)
{
	x = find(parent, x);
	y = find(parent, y);
	if (x != y)
		parent[x] = y;

}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	priority_queue<set, deque<set>>pq;
	int vertex, edge, back, cube,ans=0;
	cin >> vertex >> edge >> back >> cube;
	int*parent = new int[vertex]();
	for (int i = 0; i < vertex; i++)
		parent[i] = i;
	for (int i = 0; i < edge; i++)
	{
		set p;
		cin >> p.second.first >> p.second.second >> p.first;
		pq.push(p);
	}
	while (!pq.empty())
	{
		set top = pq.top();
		pq.pop();
		Union(parent, top.second.first, top.second.second);

		if (find(parent, back) == find(parent, cube))
		{
			ans = top.first;
			break;
		}
	}
	cout << ans;
}
