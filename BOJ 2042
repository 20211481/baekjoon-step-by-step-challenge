#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <tuple>
#include <string>
#include <cmath>
using namespace std;
typedef long long ll;
ll init(ll*tree, deque <ll>&number, int node, int start, int end)
{
	if (start == end)
		return tree[node] = number[start];
	int mid = (start + end) / 2;
	return tree[node] = init(tree, number, node * 2, start, mid) + init(tree, number, node * 2 + 1, mid + 1, end);
}
ll sum(ll*tree, int node, int start, int end, int left, int right)
{
	if (left > end || right < start)
		return 0;
	if (left <= start && end <= right)
		return tree[node];
	int mid = (start + end) / 2;
	return sum(tree, node * 2, start, mid, left, right) + sum(tree, node * 2 + 1, mid + 1, end, left, right);
}
void update(ll*tree, int node, int start, int end, int idx, ll diff)
{
	if (start > idx || end < idx)
		return;
	tree[node] += diff;
	if (start == end)
		return;
	int mid = (start + end) / 2;
	update(tree, node * 2, start, mid, idx, diff);
	update(tree, node * 2 + 1, mid + 1, end, idx, diff);
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int n, m, k;
	cin >> n >> m >> k;
	deque<ll>number(n);
	ll*tree = new ll[4 * n]();
	for (int i = 0; i < n; i++)
		cin >> number[i];
	init(tree, number, 1, 0, n - 1);
	for (int i = 0; i < k + m; i++)
	{
		ll a, b, c;
		cin >> a >> b >> c;
		if (a == 1)
		{
			//b번째 수 를 c로 변경
			b -= 1;
			update(tree, 1, 0, n - 1, b,c-number[b]);
			number[b] = c;
		}
		else
		{
			//b부터 c까지 합 구하기
			cout << sum(tree, 1, 0, n - 1, b - 1, c - 1) << "\n";
		}
	}
}
