#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <map>
#include <string>
using namespace std;
bool isp(string& s)
{
	int vowel = 0, consonant = 0;//모 자
	for (auto& c : s)
	{
		if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
			vowel++;
		else
			consonant++;
	}
	if (vowel >= 1 && consonant >= 2)
		return true;
	return false;
}
void DFS(int cur, deque<char>&list, string&tmp,int count,int target,deque<string>&ans)
{
	
	if (target == count)
	{
		if (isp(tmp))
			ans.push_back(tmp);
        
		return;
	}
	if (cur >= list.size())
		return;
	for (int i = cur; i < list.size(); i++)
	{
		tmp.push_back(list[i]);
		DFS(i + 1, list, tmp, count + 1, target, ans);
		tmp.pop_back();
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int l, c;
	cin >> l >> c;
	deque<char>list(c);
	for (int i = 0; i < c; i++)
		cin >> list[i];
	sort(list.begin(), list.end());
	deque<string>ans;
	string tmp;
	DFS(0, list, tmp, 0, l, ans);
	for (auto& e : ans)
		cout << e << "\n";
}
