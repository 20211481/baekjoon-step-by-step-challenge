#include<iostream>
#include<queue>
#include <algorithm>
#include <stack>
#include <iomanip>
#include <cmath>
#include <map>
#include <string>
using namespace std;
using ll = long long;
using set = pair<pair<ll,ll>,int>;
ll ccw(set&fir, set&sec, set&next)
{
	return ((sec.first.first - fir.first.first)*(next.first.second - fir.first.second) - (next.first.first - fir.first.first)*(sec.first.second - fir.first.second));
}
ll inerProduct(set&a, set&b)
{
	return a.first.first*b.first.first + a.first.second + b.first.second;
}
double Dist(set&a, set&b)
{
	return sqrt(pow(a.first.first - b.first.first, 2) + pow(b.first.second - a.first.second, 2));
}
double FindDist(set&a, set&b, set&Point)
{
	double AtoBdist = Dist(a, b);
	double AtoPoint = Dist(a, Point);
	set ABvector = { {b.first.first- a.first.first,b.first.second - a.first.second},0 }, APvector = { {Point.first.first - a.first.first,Point.first.second - a.first.second},0 };
	return (double)abs(inerProduct(ABvector, APvector) / AtoBdist);
}
deque<set>monotone(deque<set>&list)
{
	deque<set>up, down;
	for (auto& v : list)
	{
		while (up.size() >= 2 && ccw(up[up.size() - 2], up.back(), v) > 0)
			up.pop_back();
		up.push_back(v);
		while (down.size() >= 2 && ccw(down[down.size() - 2], down.back(), v) < 0)
			down.pop_back();
		down.push_back(v);
	}
	down.insert(down.end(), up.rbegin() + 1, up.rend() - 1);
	return down;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int test;
	cin >> test;
	while (test--)
	{
		int node;
		cin >> node;
		deque<set>list,Convex;
		deque<deque<set>>mergeConvex;
		for (int i = 0; i < node; i++)
		{
			int x, y;
			cin >> x >> y;
			list.push_back({ {x,y},i });
		}
		sort(list.begin(), list.end());

		while (list.size() > 2)
		{
			Convex = monotone(list);
			if (Convex.size() <= 2)//list에는 3개이상의 점이 있지만 일직선상에 위치하는 경우 ConvexHull stop
				break;

			for (auto& C : Convex)
			{
				for (auto iter = list.begin(); iter != list.end(); iter++)
				{
					if (C == *iter)
					{
						list.erase(iter);
						break;
					}
				}
			}
			mergeConvex.push_back(Convex);
		}
		mergeConvex.push_back(list);
		auto iter = mergeConvex.begin() + 1;
		int cnt = 0;
		while (iter != mergeConvex.end())
		{
			for (int j = 0; j < (*iter).size(); j++)
			{
				double MinDist = -1;
				int first;
				set Value;
				for (int i = 0; i < mergeConvex[0].size(); i++)
				{
					double dist = FindDist(mergeConvex[0][i], mergeConvex[0][(i + 1) % mergeConvex[0].size()], (*iter)[j]);
					if (MinDist == -1)
						first = i, MinDist = dist,Value=(*iter)[j];
					else
					{
						if (MinDist > dist)
						{
							MinDist = dist;
							first = i;
						}
					}
				}
				mergeConvex[0].insert(mergeConvex[0].begin() + first, Value);
			}
			iter=mergeConvex.erase(iter);
		}
		for (auto& v : mergeConvex[0])
			cout << v.second << " ";
		cout << "\n";
	}
}
