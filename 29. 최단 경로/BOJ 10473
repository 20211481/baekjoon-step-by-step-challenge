#include<iostream>
#include<deque>
#include<vector>
#include<queue>
#include<algorithm>
#include<cmath>
#include<list>
#include<stack>
#include <string>
using namespace std;
using set = pair<double, double>;
using Info = pair<double, int>;
using state = pair<double, pair<int, bool>>;
void Dijkstra(deque<Info>*list, int start,int des,double*dist)
{
	dist[start] = 0;
	priority_queue<state, deque<state>, greater<state>>pq;
	pq.push({ 0,{start,0} });
	while (!pq.empty())
	{
		double curTime = pq.top().first;
		int cur = pq.top().second.first;
		bool state = pq.top().second.second;
		pq.pop();

		if (dist[cur] < curTime)
			continue;

		for (auto& edge : list[cur])
		{
			double nextTime = edge.first / 5 + curTime;
			bool nextstate = true;
			int nextNode = edge.second;
			if (nextNode== des)
				nextstate = false;

			if (state)
				nextTime = std::min(edge.first / 5 + curTime,curTime+2 + fabs(edge.first - 50) / 5);
			
			if (dist[nextNode] > nextTime)
			{
				dist[nextNode] = nextTime;
				pq.push({ nextTime,{nextNode,nextstate} });
			}
			
		}
	}
}
int main(void)
{
	cin.sync_with_stdio(false);
	cin.tie(0);

	set start, des;
	cin >> start.first>>start.second>>des.first>> des.second;
	deque<set>posList;
	posList.push_back(start);

	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		set t;
		cin >> t.first >> t.second;
		posList.push_back(t);
	}
	posList.push_back(des);
	deque<Info>*list = new deque<Info>[n + 2];

	for (int i = 0; i < n + 1; i++)
	{
		for (int j = i + 1; j < n + 2; j++)
		{
			double dist = fabs(sqrt(pow(posList[i].first - posList[j].first, 2) + pow(posList[i].second - posList[j].second, 2)));
			list[i].push_back({ dist,j });
			list[j].push_back({ dist,i });

		}
	}
	double*dist = new double[n + 2]();
	fill(dist, dist + n + 2, 987654321);
	Dijkstra(list, 0, n + 1, dist);
	cout << dist[n + 1];

}
