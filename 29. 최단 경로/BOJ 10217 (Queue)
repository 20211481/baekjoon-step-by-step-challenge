#include <iostream>
#include <queue>
#include <algorithm>
#include <map>
#include <tuple>
#include <string>
using namespace std;
typedef long long ll;
#define INF 200000000
typedef pair<pair<int, int>,int>set;
void Dijkstra(deque<set>*list, int**dp, int start,int size,int& limit)
{
	queue<set>pq;
	pq.push({ { 0,0 }, start });
	while (!pq.empty())
	{
		int curNode = pq.front().second;
		int curWeight = pq.front().first.second;
		int curTime = pq.front().first.first;

		pq.pop();
		if (dp[curNode][curWeight] != -1 && dp[curNode][curWeight] < curTime)
			continue;
		for (auto& edge : list[curNode])
		{
			int nextNode = edge.second;
			int nextWeight = edge.first.second + curWeight;
			int nextTime = edge.first.first + curTime;
			if (nextWeight <= limit)
			{
				if (dp[nextNode][nextWeight] == -1)
				{
					pq.push({ { nextTime,nextWeight }, nextNode });
					dp[nextNode][nextWeight] = nextTime;
				}
				else if (dp[nextNode][nextWeight] > nextTime)
				{
					pq.push({ { nextTime,nextWeight }, nextNode });
					dp[nextNode][nextWeight] = nextTime;
				}
				
			}
		}
		
	}
}
void init(int**dp, int vertex, int money)
{
	for(int i=1;i<=vertex;i++)
		for (int j = 0; j <= money; j++)
		{
			dp[i][j] = -1;
		}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int test;
	cin >> test;
	
	for (int t = 0; t < test; t++)
	{
		int vertex, money, edge;
		cin >> vertex >> money >> edge;
		
		int**dp = new int*[vertex + 1];
		for (int i = 1; i <= vertex; i++)
			dp[i] = new int[money + 1]();//INF으로 초기화 안하기 때문에 주의
		init(dp, vertex, money);
		deque<set>*list = new deque<set>[vertex + 1];
		for (int i = 0; i < edge; i++)
		{
			int u, v, c, d;
			cin >> u >> v >> c >> d;
			list[u].push_back({ {d,c},v });
		}
		Dijkstra(list, dp, 1, vertex,money);
		int min = INF;
		for (int i = 0; i <= money; i++)
			if (dp[vertex][i] != -1 && min > dp[vertex][i])
				min = dp[vertex][i];



		if (min == INF)
			cout << "Poor KCM";
		else
			cout << min;
		cout << "\n";
	}
	
	
}
