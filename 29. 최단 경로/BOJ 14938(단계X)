#include<iostream>
#include<deque>
#include<vector>
#include<queue>
#include<algorithm>
#include<cmath>
#include<list>
#include<stack>
#include <string>
#include <map>
#include <bitset>
using namespace std;
#define INF 1500
using set = pair<int, int>;
void Dijkstra(deque<pair<int, int>>*list, int* dist, int start)
{
	priority_queue<set, deque<set>, greater<set>>pq;
	pq.push({ 0,start });
	dist[start] = 0;
	while (!pq.empty())
	{
		int cur = pq.top().second;
		int curDist = pq.top().first;
		pq.pop();
		if (dist[cur] < curDist)
			continue;

		for (auto& edge : list[cur])
		{
			int next = edge.second;
			int nextDist = edge.first + curDist;
			if (dist[next] > nextDist)
			{
				pq.push({ nextDist,next });
				dist[next] = nextDist;
			}
		}
	}
}
int main(void)
{
	cin.sync_with_stdio(false);
	cin.tie(0);
	
	int vertex, limit, edge;
	cin >> vertex >> limit >> edge;
	int*item = new int[vertex]();
	for (int i = 0; i < vertex; i++)
		cin >> item[i];
	deque<pair<int, int>>*list = new deque<pair<int, int>>[vertex];
	for (int i = 0; i < edge; i++)
	{
		int from, to, weight;
		cin >> from >> to >> weight;
		list[from - 1].push_back({ weight,to - 1 });
		list[to - 1].push_back({ weight,from - 1 });
	}
	int*dist = new int[vertex];
	fill(dist, dist + vertex, INF);
	int maxItem = 0;
	for (int i = 0; i < vertex; i++)
	{
		Dijkstra(list, dist, i);
		int tmpItem = 0;
		for (int i = 0; i < vertex; i++)
			if (dist[i] <= limit)
				tmpItem += item[i];
		maxItem = std::max(maxItem, tmpItem);
		fill(dist, dist + vertex, INF);
	}
	cout << maxItem;
}
